package com.saitejn.controller;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.saitejn.pojo.FileUpInfo;
import com.saitejn.pojo.JbExcelInput;
import com.saitejn.pojo.JbExcelMiddle;
import com.saitejn.pojo.JbRawdataHandle1;
import com.saitejn.pojo.JbUploadMiddle;
import com.saitejn.pojo.JbUserifo;
import com.saitejn.pojo.Jb_csv;
import com.saitejn.pojo.JfRawdataHandle1;
import com.saitejn.pojo.JfUploadMiddle;
import com.saitejn.services.DataServices;
import com.saitejn.services.JB_UploadServices;
import com.saitejn.services.JbRawdataHandle1Services;
import com.saitejn.util.ReadExcel;


/**
 * 文件上传控制类
 * @class UpFileController.java
 * @Description:处理文件上传以及保存数据库等操作
 * @author:罗康元
 * Company:赛特工信科技有限公司
 * @date :2016-9-13
 */
@Controller

public class UpFileController {
	@Autowired
	private DataServices dataServices;
	@Autowired
	private JB_UploadServices jb_UploadServices;
	int number =0;
	@RequestMapping("/Upfile")
	public String Upfile(@RequestParam("file") MultipartFile file)throws Exception{
	
		return "success";
	}
	//去文件上传页面
	@RequestMapping("/toupload")
	public String toupload(HttpSession session)throws Exception{
		JbRawdataHandle1 jbRawdataHandle1 = jb_UploadServices.getLastTime();
		if(jbRawdataHandle1 != null){
			Date time =  jbRawdataHandle1.getData_time();
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
			String db_endtime = sdf.format(time);
			session.setAttribute("jbdb_endtime", db_endtime);
		}
		return "upload";
	}
	@RequestMapping("tojbuploadtype")
	public String tojbuploadtype(Model model)throws Exception{
		JbRawdataHandle1 jbRawdataHandle1 = jb_UploadServices.getLastTime();
		if(jbRawdataHandle1 != null){
			Date time =  jbRawdataHandle1.getData_time();
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
			String db_newendtime = sdf.format(time);
			model.addAttribute("jbdb_newendtime",db_newendtime);
		
		}
		return "uploadtype";
	}
	@RequestMapping("/fileUpload")
	public void TestUpload(@RequestParam("file") MultipartFile[] file,Model model,HttpSession session)throws Exception{
		for(int j = 0; j<file.length;j++){
			String OriginalFname = file[j].getOriginalFilename();
			//判断上传的文件格式
			if(OriginalFname.substring(OriginalFname.lastIndexOf(".")).equals(".csv")){
				String file_path = "E:\\myeclipse10\\upload\\temp\\file\\jb\\jbfb\\";
				String preff = OriginalFname.substring(0,OriginalFname.lastIndexOf("."));
				//新的文件名
				String newFileName =preff+UUID.randomUUID()+".xls";
				//新文件
				File newFile = new File(file_path+newFileName);
				//将内存中的数据写入磁盘
				file[j].transferTo(newFile);	
				String filePath = newFile.toString();	
				//标准文件的文件名
				String file_path_bz = "E:\\myeclipse10\\upload\\temp\\file\\jb\\";
				String bzFileName = preff+UUID.randomUUID()+".xls";
				//标准文件
				File bzfile = new File(file_path_bz+bzFileName);
				jb_UploadServices.saveCopyAs(filePath, bzfile.toString());
				 List<Jb_csv> datalist =  jb_UploadServices.readJbcsv(bzfile.toString());
				
			}else{
					//存储文件的 路径
					String file_path = "E:\\myeclipse10\\upload\\temp\\file\\jb\\";
						//获取每一个原始文件的文件名
						String OriginalFilename = file[j].getOriginalFilename();
						String preff = OriginalFilename.substring(0,OriginalFilename.lastIndexOf("."));
						//新的文件名
						String newFileName =preff+UUID.randomUUID()+OriginalFilename.substring(OriginalFilename.lastIndexOf("."));
						//新文件
						File newFile = new File(file_path+newFileName);
						//将内存中的数据写入磁盘
						file[j].transferTo(newFile);
						//文件上传时间
						Date nowtime  = new Date();
						SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
						String uptime =   format.format(nowtime);
						//文件上传者
						JbUserifo user = (JbUserifo) session.getAttribute("user");
						String upperson = user.getUtruename();
						//文件真正名字
						String upname = OriginalFilename;
						//文件下载名字
						String fileename = newFileName;
						//文件状态
						String filtype = "未处理";
						FileUpInfo fileupifo = new FileUpInfo();
						fileupifo.setFileename(fileename);
						fileupifo.setFiltype(filtype);
						fileupifo.setUpname(upname);
						fileupifo.setUpperson(upperson);
						fileupifo.setUptime(uptime);
						dataServices.saveUpFileIfo(fileupifo);
						String filePath = newFile.toString();	
						//保存数据到数据库中表
						 List<JbUploadMiddle> datalist =  jb_UploadServices.readJbXls(filePath);
						 for(JbUploadMiddle jb : datalist){
							 JbUploadMiddle jbExcelMiddle = jb;
							 jb_UploadServices.saveDatetomiddle(jbExcelMiddle);
							 //jb_UploadServices.saveDatetoExcel(jbExcelMiddle);
						 }
					}
				
				
				//jb_UploadServices.saveDatetoHandl1();
				//jb_UploadServices.saveDatetoHandl2();
				//jb_UploadServices.deleterawdataMiddle();
				//jb_UploadServices.deleteUploadMiddle();
			}
		}
		
				
	//用户确认数据后处理数据
	@RequestMapping("/doJbdata_jb")
	public void doJbdata_jb()throws Exception{
		//查询缓冲数据表的有电的数据
		jb_UploadServices.saveDatetoHandl1();
		jb_UploadServices.saveDatetoHandl2();
		jb_UploadServices.deleterawdataMiddle();
		jb_UploadServices.deleteUploadMiddle();
	}
	
	
	@RequestMapping("/Ajaxtoupload")
	public String Ajaxtoupload()throws Exception{
		
		return "testAjaxUpload";
	}
	@RequestMapping("/doAjaxUpload")
	public String  doAjaxUpload(HttpServletRequest request, @RequestParam("file") MultipartFile file[], ModelMap model)throws Exception{
		//判断文件是否为空
		if(file != null){
			//存储文件的 路径
			String file_path = "E:\\myeclipse10\\upload\\temp\\file\\testAjax\\";
			for(int i = 0; i<file.length;i++){
				//获取每一个原始文件的文件名
				String OriginalFilename = file[i].getOriginalFilename();
				//新的文件名
				String newFileName = UUID.randomUUID()+OriginalFilename.substring(OriginalFilename.lastIndexOf("."));
				//新文件
				File newFile = new File(file_path+newFileName);
				//将内存中的数据写入磁盘
				file[i].transferTo(newFile);
				//文件上传时间
				model.addAttribute("fileUrl", request.getContextPath() + "/upload/" + OriginalFilename);
			}
		}
	
        return "testAjaxUpload";
	}
	

}
