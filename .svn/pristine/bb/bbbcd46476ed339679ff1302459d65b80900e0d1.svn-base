package com.saitejn.services.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;

import com.saitejn.mapper.JB_EnergyMapper;
import com.saitejn.pojo.JbRawdataHandle1;
import com.saitejn.pojo.JfRawdataHandle1;
import com.saitejn.services.JB_EnergyServices;

/**
 * 金杯能耗实现类
 * @JB_EnergyServicesImpl
 * @Description
 * @author 罗康元
 * @company 成都赛特工信科技有限公司
 * @date 2017-6-28
 */
public class JB_EnergyServicesImpl implements JB_EnergyServices {
	@Autowired
	private JB_EnergyMapper jb_EnergyMapper;
	@Override
	public List<JbRawdataHandle1> selectDailyreport_jb(String btime,
			String etime) throws Exception {
		List<JbRawdataHandle1> list1 = jb_EnergyMapper.selectDailyreportFortime1_jb(btime, etime);
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date newdate1 = sdf.parse(btime);
		Calendar c1 = Calendar.getInstance(); 
		c1.setTime(newdate1);  
		c1.set(Calendar.DATE, c1.get(Calendar.DATE) + 1);
		Date data1 = c1.getTime();
        Date newdate2 = sdf.parse(etime);
		Calendar c2 = Calendar.getInstance(); 
		c2.setTime(newdate2);  
		c2.set(Calendar.DATE, c2.get(Calendar.DATE) + 1);
        Date data2= c2.getTime();
        String dayBefore = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(data1);
        String dayend = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(data2);
		List<JbRawdataHandle1> list2 = jb_EnergyMapper.selectDailyreportFortime2_jb(dayBefore, dayend);
		List<JbRawdataHandle1> list3 = new ArrayList<JbRawdataHandle1>();
		List<JbRawdataHandle1> list4 = new ArrayList<JbRawdataHandle1>();
		if(list2.size()>0){
			 for(int i = 0 ;i < list2.size(); i++){
				 JbRawdataHandle1 jb= list2.get(i);
				 Date date = jb.getData_time();
				 Calendar date1 = Calendar.getInstance();
				 date1.setTime(date);
				 date1.set(Calendar.DATE, date1.get(Calendar.DATE) - 1);
				 Date date2 = date1.getTime();
				 jb.setData_time(date2);
				 list3.add(jb);
			 }
			 for(JbRawdataHandle1 l1:list3){
					for(JbRawdataHandle1 l2:list1){
						if(l1.getData_time().getTime()==l2.getData_time().getTime()){
							JbRawdataHandle1 jbRawdataHandle1 = new JbRawdataHandle1();
							jbRawdataHandle1.setData_time(l2.getData_time());
							jbRawdataHandle1.setTime_nh3_yield(l1.getTime_nh3_yield()+l2.getTime_nh3_yield());
							jbRawdataHandle1.setTime_electric_consume(l1.getTime_electric_consume()+l2.getTime_electric_consume());
							jbRawdataHandle1.setTime_raw_gas_consume(l1.getTime_raw_gas_consume()+l2.getTime_raw_gas_consume());
							jbRawdataHandle1.setOrig_id(l1.getOrig_id()+l2.getOrig_id());
							jbRawdataHandle1.setClassNumber(l1.getClassNumber());
							list4.add(jbRawdataHandle1);
							break;
						}
					}
				}
				for(JbRawdataHandle1 l1:list3){
					for(JbRawdataHandle1 l2:list1){
						if(l1.getData_time().getTime()==l2.getData_time().getTime()){
						     list1.remove(l2);
							break;
						}
					}
				}
		 }
		list4.addAll(list1);
		Collections.sort(list4,new Comparator<JbRawdataHandle1>() {

			@Override
			public int compare(JbRawdataHandle1 o1, JbRawdataHandle1 o2) {
				if(o1.getData_time().getTime() > o2.getData_time().getTime()){
					return 1;
				}
				if(o1.getData_time().getTime() == o2.getData_time().getTime()){
					return 0;
				}
				
				return -1;
			}
		});
		return list4;
	}
	@Override
	public List<JbRawdataHandle1> selectDailyreportForClass_jb(String btime,
			String etime) throws Exception {
		List<JbRawdataHandle1> list1 = jb_EnergyMapper.selectDailyReportForClass1_jb(btime, etime);
		List<JbRawdataHandle1> list9 = new ArrayList<JbRawdataHandle1>();
		for(int i = 0; i<list1.size()-1;i++){
			JbRawdataHandle1 jbRawdataHandle1 = list1.get(i);
			JbRawdataHandle1 jbRawdataHandle2 = list1.get(i+1);
			Date jbtime = jbRawdataHandle1.getData_time();
			Date jbtime2 = jbRawdataHandle2.getData_time();
			long between=(jbtime2.getTime()-jbtime.getTime())/1000;//除以1000是为了转换成秒
			long day1=between/(24*3600);
			if(day1>1){
				//说明之间有缺失的早班，则添加
				for(int j = 1;j<day1;j++){
					//添加
					JbRawdataHandle1 jb = new JbRawdataHandle1();
					Calendar date1 = Calendar.getInstance();
					date1.setTime(jbtime);
					date1.set(Calendar.DATE, date1.get(Calendar.DATE) +j);
					Date date2 = date1.getTime();
					jb.setData_time(date2);
					jb.setTime_nh3_yield(0.0);
					jb.setTime_electric_consume(0.0);
					jb.setTime_raw_gas_consume(0.0);
					jb.setOrig_id(0);
					jb.setShift(0);
					jb.setClassNumber(1);
					list9.add(jb);
				}
			}
		}
		list1.addAll(list9);
		List<JbRawdataHandle1> list2_1 = jb_EnergyMapper.selectDailyReportForClass2_1_jb(btime, etime);
		List<JbRawdataHandle1> list10 = new ArrayList<JbRawdataHandle1>();
		for(int i = 0; i<list2_1.size()-1;i++){
			JbRawdataHandle1 jbRawdataHandle1 = list2_1.get(i);
			JbRawdataHandle1 jbRawdataHandle2 = list2_1.get(i+1);
			Date jbtime = jbRawdataHandle1.getData_time();
			Date jbtime2 = jbRawdataHandle2.getData_time();
			long between=(jbtime2.getTime()-jbtime.getTime())/1000;//除以1000是为了转换成秒
			long day1=between/(24*3600);
			if(day1>1){
				//说明之间有缺失的早班，则添加
				for(int j = 1;j<day1;j++){
					//添加
					JbRawdataHandle1 jb = new JbRawdataHandle1();
					Calendar date1 = Calendar.getInstance();
					date1.setTime(jbtime);
					date1.set(Calendar.DATE, date1.get(Calendar.DATE) +j);
					Date date2 = date1.getTime();
					jb.setData_time(date2);
					jb.setTime_nh3_yield(0.0);
					jb.setTime_electric_consume(0.0);
					jb.setTime_raw_gas_consume(0.0);
					jb.setOrig_id(0);
					jb.setShift(0);
					jb.setClassNumber(2);
					list10.add(jb);
				}
			}
		}
		list2_1.addAll(list10);
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date newdate1 = sdf.parse(btime);
		Calendar c1 = Calendar.getInstance(); 
		c1.setTime(newdate1);  
		c1.set(Calendar.DATE, c1.get(Calendar.DATE) + 1);
		Date data1 = c1.getTime();
        Date newdate2 = sdf.parse(etime);
		Calendar c2 = Calendar.getInstance(); 
		c2.setTime(newdate2);  
		c2.set(Calendar.DATE, c2.get(Calendar.DATE) + 1);
        Date data2= c2.getTime();
        String dayBefore = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(data1);
        String dayend = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(data2);
        List<JbRawdataHandle1> list2_2 = jb_EnergyMapper.selectDailyReportForClass2_2_jb(dayBefore, dayend);
        List<JbRawdataHandle1> list3 = new ArrayList<JbRawdataHandle1>();
        List<JbRawdataHandle1> list4 = new ArrayList<JbRawdataHandle1>();
        if(list2_2.size()>0){
			 for(int i = 0 ;i < list2_2.size(); i++){
				 JbRawdataHandle1 jb= list2_2.get(i);
				 Date date = jb.getData_time();
				 Calendar date1 = Calendar.getInstance();
				 date1.setTime(date);
				 date1.set(Calendar.DATE, date1.get(Calendar.DATE) - 1);
				 Date date2 = date1.getTime();
				 jb.setData_time(date2);
				 list3.add(jb);
			 }
			 for(JbRawdataHandle1 l1:list3){
					for(JbRawdataHandle1 l2:list2_1){
						if(l1.getData_time().getTime()==l2.getData_time().getTime()){
							JbRawdataHandle1 jbRawdataHandle1 = new JbRawdataHandle1();
							jbRawdataHandle1.setData_time(l2.getData_time());
							jbRawdataHandle1.setTime_nh3_yield(l1.getTime_nh3_yield()+l2.getTime_nh3_yield());
							jbRawdataHandle1.setTime_electric_consume(l1.getTime_electric_consume()+l2.getTime_electric_consume());
							jbRawdataHandle1.setTime_raw_gas_consume(l1.getTime_raw_gas_consume()+l2.getTime_raw_gas_consume());
							jbRawdataHandle1.setOrig_id(l1.getOrig_id()+l2.getOrig_id());
							jbRawdataHandle1.setShift(l1.getShift()+l2.getShift());
							jbRawdataHandle1.setClassNumber(l1.getClassNumber());
							list4.add(jbRawdataHandle1);
							break;
						}
					}
				}
				for(JbRawdataHandle1 l1:list3){
					for(JbRawdataHandle1 l2:list2_1){
						if(l1.getData_time().getTime()==l2.getData_time().getTime()){
							list2_1.remove(l2);
							break;
						}
					}
				}
		 }
        list4.addAll(list2_1);
        list1.addAll(list4);
        Collections.sort(list1,new Comparator<JbRawdataHandle1>() {
			@Override
			public int compare(JbRawdataHandle1 o1, JbRawdataHandle1 o2) {
				if(o1.getData_time().getTime() > o2.getData_time().getTime()){
					return 1;
				}
				if(o1.getData_time().getTime() == o2.getData_time().getTime()){
					return 0;
				}
				return -1;
			}
		});
		return list1;
	}
	@Override
	public List<JbRawdataHandle1> selectQuarterreport_jb(String btime,
			String etime) throws Exception {
		List<JbRawdataHandle1> list1 = jb_EnergyMapper.selectQuarterForMouth_1_jb(btime, etime);
		List<JbRawdataHandle1>list2 = jb_EnergyMapper.selectQuarterForMouth_2_jb(btime, etime);
		for(JbRawdataHandle1 l1:list1){
			for(JbRawdataHandle1 l2:list2){
				
				Date l1time = l1.getData_time();
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
				String lintime = sdf.format(l1time);
				Date listNextTime = l2.getData_time();
				String liNeTime = sdf.format(listNextTime);
				
				if(lintime.equals(liNeTime)){
					l1.setData_time(l1.getData_time());
					l1.setTime_nh3_yield(l1.getTime_nh3_yield()+l2.getTime_nh3_yield());
					l1.setTime_electric_consume(l1.getTime_electric_consume()+l2.getTime_electric_consume());
					l1.setTime_raw_gas_consume(l1.getTime_raw_gas_consume()+l2.getTime_raw_gas_consume());
					l1.setOrig_id(l1.getOrig_id()+l2.getOrig_id());
					break;
				}
			}
		}
		//得到用户输入的时间区域中有哪些月份
		List<String> Utime = this.getMonthBetween(btime, etime);
		List<JbRawdataHandle1>list3 = new ArrayList<JbRawdataHandle1>();
		List<JbRawdataHandle1>list4 = new ArrayList<JbRawdataHandle1>();
		//查询下一个月月份的00：00：00-8：00：00的数据
		for(int i =0;i<Utime.size();i++){
			String time = Utime.get(i);
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
			Date userDate = sdf.parse(time);
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(userDate); 
			calendar.add(Calendar.MONTH, +1);
			Date newDate = calendar.getTime();
			String rtime = sdf.format(newDate);	
			String betime = rtime+"-01 00:00:00";
			String entime = rtime+"-01 23:59:59";
			JbRawdataHandle1 jbRawdataHandle1 = jb_EnergyMapper.selectQuarterForMouth_3_jb(betime, entime);
			if(jbRawdataHandle1 != null){
			list3.add(jbRawdataHandle1);
			}
		}
		for(int i =0;i<Utime.size();i++){
			String time = Utime.get(i);
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
			Date userDate = sdf.parse(time);
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(userDate); 
			calendar.add(Calendar.MONTH, +0);
			Date newDate = calendar.getTime();
			String rtime = sdf.format(newDate);	
			String betime = rtime+"-01 00:00:00";
			String entime = rtime+"-01 23:59:59";
			JbRawdataHandle1 jbRawdataHandle1 = jb_EnergyMapper.selectQuarterForMouth_3_jb(betime, entime);
			if(jbRawdataHandle1 != null){
			list4.add(jbRawdataHandle1);
			}
		}
			for(JbRawdataHandle1 l1:list1){
				for(JbRawdataHandle1 l2:list3){
					Date l1time = l1.getData_time();
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
					String lintime = sdf.format(l1time);
					
					Date listNextTime = l2.getData_time();
					Calendar calendar = Calendar.getInstance();
					calendar.setTime(listNextTime); 
					calendar.add(Calendar.MONTH, -1);
					Date newDate = calendar.getTime();
					String liNeTime = sdf.format(newDate);
					
					if(lintime.equals(liNeTime)){
						l1.setData_time(l1.getData_time());
						l1.setTime_nh3_yield(l1.getTime_nh3_yield()+l2.getTime_nh3_yield());
						l1.setTime_electric_consume(l1.getTime_electric_consume()+l2.getTime_electric_consume());
						l1.setTime_raw_gas_consume(l1.getTime_raw_gas_consume()+l2.getTime_raw_gas_consume());
						l1.setOrig_id(l1.getOrig_id()+l2.getOrig_id());
						break;
					}
				}
			}
			for(JbRawdataHandle1 l1:list1){
				for(JbRawdataHandle1 l2:list4){
					Date l1time = l1.getData_time();
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
					String lintime = sdf.format(l1time);
					Date listNextTime = l2.getData_time();
					Calendar calendar = Calendar.getInstance();
					calendar.setTime(listNextTime); 
					calendar.add(Calendar.MONTH, -0);
					Date newDate = calendar.getTime();
					
					String liNeTime = sdf.format(newDate);
					
					
					if(lintime.equals(liNeTime)){
						l1.setData_time(l1.getData_time());
						l1.setTime_nh3_yield(l1.getTime_nh3_yield()+l2.getTime_nh3_yield());
						l1.setTime_electric_consume(l1.getTime_electric_consume()+l2.getTime_electric_consume());
						l1.setTime_raw_gas_consume(l1.getTime_raw_gas_consume()+l2.getTime_raw_gas_consume());
						l1.setOrig_id(l1.getOrig_id()-l2.getOrig_id());
						
						break;
					}
				}
			}
			
		
			Collections.sort(list1,new Comparator<JbRawdataHandle1>() {

				@Override
				public int compare(JbRawdataHandle1 o1, JbRawdataHandle1 o2) {
					if(o1.getData_time().getTime() > o2.getData_time().getTime()){
						return 1;
					}
					if(o1.getData_time().getTime() == o2.getData_time().getTime()){
						return 0;
					}
					
					return -1;
				}
			});
        
			/*if(list2.size()>0){
			 for(JbRawdataHandle1 l1:list1){
					for(JbRawdataHandle1 l2:list2){
						Date l1time = l1.getData_time();
						SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy-MM");
						String lintime = sdf2.format(l1time);
						
						Date listNextTime = l2.getData_time();
						
						String liNeTime = sdf2.format(listNextTime);
						
						if(lintime.equals(liNeTime)){
							JbRawdataHandle1 jbRawdataHandle1 = new JbRawdataHandle1();
							jbRawdataHandle1.setData_time(l2.getData_time());
							jbRawdataHandle1.setTime_nh3_yield(l1.getTime_nh3_yield()+l2.getTime_nh3_yield());
							jbRawdataHandle1.setTime_electric_consume(l1.getTime_electric_consume()+l2.getTime_electric_consume());
							jbRawdataHandle1.setTime_raw_gas_consume(l1.getTime_raw_gas_consume()+l2.getTime_raw_gas_consume());
							jbRawdataHandle1.setOrig_id(l1.getOrig_id()+l2.getOrig_id());
							list4.add(jbRawdataHandle1);
							break;
						}
					}
				}
				
		 }*/
       
		return list1;
	}
	private static List<String> getMonthBetween(String minDate, String maxDate) throws Exception {
	    ArrayList<String> result = new ArrayList<String>();
	      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");//格式化为年月
	  
	      Calendar min = Calendar.getInstance();
	      Calendar max = Calendar.getInstance();
	  
	      min.setTime(sdf.parse(minDate));
	      min.set(min.get(Calendar.YEAR), min.get(Calendar.MONTH), 1);
	
	     max.setTime(sdf.parse(maxDate));
	     max.set(max.get(Calendar.YEAR), max.get(Calendar.MONTH), 2);
	 
	     Calendar curr = min;
     while (curr.before(max)) {
	      result.add(sdf.format(curr.getTime()));
	      curr.add(Calendar.MONTH, 1);
	     }
	 
	     return result;
		   }

}
